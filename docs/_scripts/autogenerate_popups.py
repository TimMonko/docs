"""
Ultra-simple script to capture napari button popups using the same approach as napari's tests.
"""
from pathlib import Path
from qtpy.QtCore import QPoint, QTimer
from qtpy.QtWidgets import QApplication
from napari._qt.qt_event_loop import get_qapp
from napari._qt.dialogs.qt_modal import QtPopup
import napari

# Define paths
IMAGES_PATH = Path(__file__).resolve().parent.parent / "images" / "_autogenerated" / "popups"
IMAGES_PATH.mkdir(parents=True, exist_ok=True)

def capture_popups():
    """Capture napari button popups."""
    app = get_qapp()
    
    # Create viewer and add sample data
    viewer = napari.Viewer(show=True)
    viewer.window._qt_window.resize(800, 600)
    viewer.open_sample(plugin='napari', sample='cells3d')
    
    # Wait for viewer to initialize
    QTimer.singleShot(2000, lambda: start_capture(viewer))
    app.exec_()

def start_capture(viewer):
    """Start the popup capture sequence."""
    # Get the viewer buttons directly - like in the tests
    for widget in viewer.window._qt_window.findChildren(object):
        if widget.__class__.__name__ == "QtViewerButtons":
            viewer_buttons = widget
            break
    
    # First, set 3D mode for ndisplay popup
    viewer.dims.ndisplay = 3
    get_qapp().processEvents()
    
    # Schedule the three popups in sequence with delays
    # First: ndisplay popup
    QTimer.singleShot(100, lambda: trigger_popup(
        viewer_buttons.ndisplayButton, 
        "ndisplay_popup", 
        lambda: trigger_popup(
            viewer_buttons.gridViewButton, 
            "grid_popup", 
            lambda: cleanup(viewer)
        )
    ))

def trigger_popup(button, name, next_func):
    """Trigger a popup by emitting a context menu request, then capture it."""
    print(f"Triggering {name}...")
    
    # Trigger the popup - same as in the tests
    button.customContextMenuRequested.emit(QPoint())
    
    # Give popup time to appear
    QTimer.singleShot(800, lambda: capture_popup(name, next_func))

def capture_popup(name, next_func):
    """Capture the currently visible popup."""
    # Find the popup
    popup = None
    for widget in QApplication.topLevelWidgets():
        if isinstance(widget, QtPopup):
            popup = widget
            break
    
    if popup:
        print(f"Found popup, capturing {name}...")
        get_qapp().processEvents()
        
        # Capture and save
        popup.grab().save(str(IMAGES_PATH / f"{name}.png"))
        popup.close()
        print(f"Saved {name}")
    else:
        print(f"No popup found for {name}")
    
    # Call the next function after a delay
    QTimer.singleShot(500, next_func)

def cleanup(viewer):
    """Close the viewer and quit."""
    print("All captures complete")
    viewer.close()
    QTimer.singleShot(200, lambda: get_qapp().quit())

if __name__ == "__main__":
    capture_popups()