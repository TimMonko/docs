"""
Minimalist script to capture napari button popups.
"""
from pathlib import Path
from qtpy.QtCore import QPoint, QTimer, Qt
from qtpy.QtWidgets import QApplication
from napari._qt.qt_event_loop import get_qapp
from napari._qt.qt_resources import get_stylesheet
from napari._qt.dialogs.qt_modal import QtPopup
import napari

# Define paths
IMAGES_PATH = Path(__file__).resolve().parent.parent / "images" / "_autogenerated" / "popups"
IMAGES_PATH.mkdir(parents=True, exist_ok=True)

def capture_popups():
    """Capture button popups from napari."""
    app = get_qapp()
    
    # Create viewer and add sample data
    print("Setting up viewer...")
    viewer = napari.Viewer(show=True)
    viewer.window._qt_window.resize(800, 600)
    viewer.window._qt_window.setStyleSheet(get_stylesheet("dark"))
    viewer.open_sample(plugin='napari', sample='cells3d')
    
    # Wait for viewer to initialize, then start capturing
    QTimer.singleShot(2000, lambda: capture_ndisplay_popup(viewer))
    app.exec_()

def capture_ndisplay_popup(viewer):
    """Capture the ndisplay popup."""
    print("Capturing ndisplay popup...")
    
    # Set to 3D mode for full controls
    viewer.dims.ndisplay = 3
    get_qapp().processEvents()
    
    # Find viewer buttons widget
    viewer_buttons = next(w for w in viewer.window._qt_window.findChildren(object) 
                         if w.__class__.__name__ == "QtViewerButtons")
    
    # Ensure button responds to context menu
    viewer_buttons.ndisplayButton.setContextMenuPolicy(Qt.CustomContextMenu)
    
    # Trigger and capture popup
    viewer_buttons.ndisplayButton.customContextMenuRequested.emit(QPoint())
    QTimer.singleShot(800, lambda: save_popup("ndisplay_popup", 
                               lambda: capture_grid_popup(viewer, viewer_buttons)))

def capture_grid_popup(viewer, viewer_buttons):
    """Capture the grid view popup."""
    print("Capturing grid view popup...")
    
    # Ensure button responds to context menu
    viewer_buttons.gridViewButton.setContextMenuPolicy(Qt.CustomContextMenu)
    
    # Trigger and capture popup
    viewer_buttons.gridViewButton.customContextMenuRequested.emit(QPoint())
    QTimer.singleShot(800, lambda: save_popup("grid_view_popup", 
                               lambda: capture_roll_popup(viewer, viewer_buttons)))

def capture_roll_popup(viewer, viewer_buttons):
    """Capture the roll dims popup."""
    print("Capturing roll dims popup...")
    
    # Ensure button responds to context menu
    viewer_buttons.rollDimsButton.setContextMenuPolicy(Qt.CustomContextMenu)
    
    # Trigger and capture popup
    viewer_buttons.rollDimsButton.customContextMenuRequested.emit(QPoint())
    QTimer.singleShot(800, lambda: save_popup("roll_dims_popup", 
                               lambda: close_viewer(viewer)))

def save_popup(name, next_function):
    """Save the current popup and call the next function."""
    # Find the popup
    popup = next((w for w in QApplication.topLevelWidgets() 
                 if isinstance(w, QtPopup)), None)
    
    if popup:
        print(f"Saving {name} popup...")
        get_qapp().processEvents()
        popup.grab().save(str(IMAGES_PATH / f"{name}.png"))
        popup.close()
    
    # Call the next function
    QTimer.singleShot(500, next_function)

def close_viewer(viewer):
    """Close the viewer and exit."""
    print("All popups captured, exiting...")
    viewer.close()
    QTimer.singleShot(200, lambda: get_qapp().quit())

if __name__ == "__main__":
    capture_popups()